What happens when you initialize a repository? Why do you need to do it?
  git creates .git file with metadata, but no commits is done yet, 
  we can see it in the output of: git status

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  Staging area allows us to have more granular control over changes.
  We can account for changes we want, and do't take into account other changes.
  This also allows to keep commits small "one per logical change"

How can you use the staging area to make sure you have one commit per logical
change?
 
  I will use it to select changes I want to commit. 
  I can compare changes using git diff. 
  If I need ot compare changes in working directory against staging area, I can
  use:
         "git diff" without parameters
  If I need to compare changes in staging area against most recent commit, I can
  use:
         "git diff --staged"
  If for some reason, I want to discard changes I have in staging area or 
  working directory, I can use with caution:
         "git reset --hard"
  but it is irreversible!

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  
  e.g. I may have a need to add a new experimetal feature, 
  or maybe change something in my program for a group of users,
  or maybe use my files in some other very similar,
  but different project.

  Brahces also help people to collaborate in a team, e.g I can use branch to work on a new feature, or on fixing bug, or I can have separate "development branch". So that my work doesn't affect production code until I have completed it, and merged it with .

How do the diagrams help you visualize the branch structure?
  
  Diagram helped me understand, what is 'detached HEAD' state, and how to create branch, when I've made commit after I checked out some previous commits...

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  
  Changes in branches will be compared line by line, with regard to commit before "branches split". In result we will have:
  sum(
      +All lines, which we didn't change 
      +All newly added lines (with regard to commit before split)
      -All Deleted lines (with regard to commit before split).
     )

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
pros:
  Automatic merging identifies what lines are changed with regard to original file,
  and based on this merges branches (commits at branches)
  It can merge some changes, but not all. If it will encouter with conflict,
  It will give out error message, and modify files in a way, which help us
  to merge different versions of files (with text-based marks).
cons:
  Automatic merging can introduce bugs, if used too havily. It is always recommended to
  check, what automatic merging did, by content-expert.

